/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.12.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Uint128, InstantiateMsg, Coin, ExecuteMsg, Action, Expiration, Timestamp, Uint64, QueryMsg, ProposalBy, Order, ProposalStatus, Config, OwnershipForString, Addr, Proposal, ProposalsResponse, Status } from "./ProposalManager.types";
export interface ProposalManagerReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<Config>;
  proposal: ({
    id
  }: {
    id: number;
  }) => Promise<Proposal>;
  proposals: ({
    filterBy,
    limit,
    sort,
    status
  }: {
    filterBy?: ProposalBy;
    limit?: number;
    sort?: Order;
    status?: ProposalStatus;
  }) => Promise<ProposalsResponse>;
  status: () => Promise<Status>;
  ownership: () => Promise<OwnershipForString>;
}
export class ProposalManagerQueryClient implements ProposalManagerReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.proposal = this.proposal.bind(this);
    this.proposals = this.proposals.bind(this);
    this.status = this.status.bind(this);
    this.ownership = this.ownership.bind(this);
  }
  config = async (): Promise<Config> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  proposal = async ({
    id
  }: {
    id: number;
  }): Promise<Proposal> => {
    return this.client.queryContractSmart(this.contractAddress, {
      proposal: {
        id
      }
    });
  };
  proposals = async ({
    filterBy,
    limit,
    sort,
    status
  }: {
    filterBy?: ProposalBy;
    limit?: number;
    sort?: Order;
    status?: ProposalStatus;
  }): Promise<ProposalsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      proposals: {
        filter_by: filterBy,
        limit,
        sort,
        status
      }
    });
  };
  status = async (): Promise<Status> => {
    return this.client.queryContractSmart(this.contractAddress, {
      status: {}
    });
  };
  ownership = async (): Promise<OwnershipForString> => {
    return this.client.queryContractSmart(this.contractAddress, {
      ownership: {}
    });
  };
}
export interface ProposalManagerInterface extends ProposalManagerReadOnlyInterface {
  contractAddress: string;
  sender: string;
  createProposal: ({
    gift,
    receiver,
    speech,
    title
  }: {
    gift: Coin[];
    receiver: string;
    speech?: string;
    title?: string;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  cancelProposal: ({
    id
  }: {
    id: number;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  yes: ({
    id,
    reply
  }: {
    id: number;
    reply?: string;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  no: ({
    id,
    reply
  }: {
    id: number;
    reply?: string;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  updateConfig: ({
    successfulProposalFee
  }: {
    successfulProposalFee?: Coin;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  updateOwnership: (action: Action, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
}
export class ProposalManagerClient extends ProposalManagerQueryClient implements ProposalManagerInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.createProposal = this.createProposal.bind(this);
    this.cancelProposal = this.cancelProposal.bind(this);
    this.yes = this.yes.bind(this);
    this.no = this.no.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
    this.updateOwnership = this.updateOwnership.bind(this);
  }
  createProposal = async ({
    gift,
    receiver,
    speech,
    title
  }: {
    gift: Coin[];
    receiver: string;
    speech?: string;
    title?: string;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      create_proposal: {
        gift,
        receiver,
        speech,
        title
      }
    }, fee_, memo_, funds_);
  };
  cancelProposal = async ({
    id
  }: {
    id: number;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      cancel_proposal: {
        id
      }
    }, fee_, memo_, funds_);
  };
  yes = async ({
    id,
    reply
  }: {
    id: number;
    reply?: string;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      yes: {
        id,
        reply
      }
    }, fee_, memo_, funds_);
  };
  no = async ({
    id,
    reply
  }: {
    id: number;
    reply?: string;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      no: {
        id,
        reply
      }
    }, fee_, memo_, funds_);
  };
  updateConfig = async ({
    successfulProposalFee
  }: {
    successfulProposalFee?: Coin;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        successful_proposal_fee: successfulProposalFee
      }
    }, fee_, memo_, funds_);
  };
  updateOwnership = async (action: Action, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_ownership: action
    }, fee_, memo_, funds_);
  };
}