/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const ProposalManagerLazyImport = createFileRoute('/proposal-manager')()
const ProposalManagerLoveLazyImport = createFileRoute(
  '/proposal-manager/love/ðŸ’–',
)()

// Create/Update Routes

const ProposalManagerLazyRoute = ProposalManagerLazyImport.update({
  id: '/proposal-manager',
  path: '/proposal-manager',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/proposal-manager.lazy').then((d) => d.Route),
)

const ProposalManagerLoveLazyRoute = ProposalManagerLoveLazyImport.update({
  id: '/love/ðŸ’–',
  path: '/love/ðŸ’–',
  getParentRoute: () => ProposalManagerLazyRoute,
} as any).lazy(() =>
  import('./routes/proposal-manager.love.ðŸ’–.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/proposal-manager': {
      id: '/proposal-manager'
      path: '/proposal-manager'
      fullPath: '/proposal-manager'
      preLoaderRoute: typeof ProposalManagerLazyImport
      parentRoute: typeof rootRoute
    }
    '/proposal-manager/love/ðŸ’–': {
      id: '/proposal-manager/love/ðŸ’–'
      path: '/love/ðŸ’–'
      fullPath: '/proposal-manager/love/ðŸ’–'
      preLoaderRoute: typeof ProposalManagerLoveLazyImport
      parentRoute: typeof ProposalManagerLazyImport
    }
  }
}

// Create and export the route tree

interface ProposalManagerLazyRouteChildren {
  ProposalManagerLoveLazyRoute: typeof ProposalManagerLoveLazyRoute
}

const ProposalManagerLazyRouteChildren: ProposalManagerLazyRouteChildren = {
  ProposalManagerLoveLazyRoute: ProposalManagerLoveLazyRoute,
}

const ProposalManagerLazyRouteWithChildren =
  ProposalManagerLazyRoute._addFileChildren(ProposalManagerLazyRouteChildren)

export interface FileRoutesByFullPath {
  '/proposal-manager': typeof ProposalManagerLazyRouteWithChildren
  '/proposal-manager/love/ðŸ’–': typeof ProposalManagerLoveLazyRoute
}

export interface FileRoutesByTo {
  '/proposal-manager': typeof ProposalManagerLazyRouteWithChildren
  '/proposal-manager/love/ðŸ’–': typeof ProposalManagerLoveLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/proposal-manager': typeof ProposalManagerLazyRouteWithChildren
  '/proposal-manager/love/ðŸ’–': typeof ProposalManagerLoveLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/proposal-manager' | '/proposal-manager/love/ðŸ’–'
  fileRoutesByTo: FileRoutesByTo
  to: '/proposal-manager' | '/proposal-manager/love/ðŸ’–'
  id: '__root__' | '/proposal-manager' | '/proposal-manager/love/ðŸ’–'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  ProposalManagerLazyRoute: typeof ProposalManagerLazyRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  ProposalManagerLazyRoute: ProposalManagerLazyRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/proposal-manager"
      ]
    },
    "/proposal-manager": {
      "filePath": "proposal-manager.lazy.tsx",
      "children": [
        "/proposal-manager/love/ðŸ’–"
      ]
    },
    "/proposal-manager/love/ðŸ’–": {
      "filePath": "proposal-manager.love.ðŸ’–.lazy.tsx",
      "parent": "/proposal-manager"
    }
  }
}
ROUTE_MANIFEST_END */
