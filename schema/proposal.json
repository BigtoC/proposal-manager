{
  "contract_name": "proposal",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "successful_proposal_fee"
    ],
    "properties": {
      "owner": {
        "description": "The owner of the contract.",
        "type": [
          "string",
          "null"
        ]
      },
      "successful_proposal_fee": {
        "description": "The fee that the owner will receive for each successful proposal",
        "allOf": [
          {
            "$ref": "#/definitions/Coin"
          }
        ]
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "Creates a proposal.",
        "type": "object",
        "required": [
          "create_proposal"
        ],
        "properties": {
          "create_proposal": {
            "type": "object",
            "required": [
              "gift",
              "receiver"
            ],
            "properties": {
              "gift": {
                "description": "The amount of coins that will be sent to the partner as a gift, can be empty.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Coin"
                }
              },
              "receiver": {
                "description": "The receiver's address that will receive the proposal",
                "type": "string"
              },
              "speech": {
                "description": "The proposal's speech.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "title": {
                "description": "The proposal's title.",
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Cancels a proposal.",
        "type": "object",
        "required": [
          "cancel_proposal"
        ],
        "properties": {
          "cancel_proposal": {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "description": "The proposal's ID.",
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Say yes to a proposal.",
        "type": "object",
        "required": [
          "yes"
        ],
        "properties": {
          "yes": {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "description": "The proposal's ID.",
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "reply": {
                "description": "why you say yes",
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Say no to a proposal.",
        "type": "object",
        "required": [
          "no"
        ],
        "properties": {
          "no": {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "description": "The proposal's ID.",
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "reply": {
                "description": "why you say no",
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "update contract config Only the owner can execute this message.",
        "type": "object",
        "required": [
          "update_config"
        ],
        "properties": {
          "update_config": {
            "type": "object",
            "properties": {
              "owner": {
                "description": "The new owner address.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "successful_proposal_fee": {
                "description": "The new fee that the owner will receive for each successful proposal",
                "anyOf": [
                  {
                    "$ref": "#/definitions/Coin"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "description": "Retrieves the configuration",
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "proposal"
        ],
        "properties": {
          "proposal": {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "proposals"
        ],
        "properties": {
          "proposals": {
            "type": "object",
            "properties": {
              "filter_by": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/ProposalBy"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "sort": {
                "description": "Sort proposals by id",
                "anyOf": [
                  {
                    "$ref": "#/definitions/Order"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "status": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/ProposalStatus"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Order": {
        "type": "string",
        "enum": [
          "ascending",
          "descending"
        ]
      },
      "ProposalBy": {
        "description": "Filter proposals by proposer or receiver",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "proposer"
            ],
            "properties": {
              "proposer": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "receiver"
            ],
            "properties": {
              "receiver": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "ProposalStatus": {
        "type": "string",
        "enum": [
          "pending",
          "yes",
          "no"
        ]
      }
    }
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Config",
      "description": "The contract configuration.",
      "type": "object",
      "required": [
        "owner",
        "successful_proposal_fee"
      ],
      "properties": {
        "owner": {
          "description": "The address where the collected fees go to.",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "successful_proposal_fee": {
          "description": "The fee that the owner will receive for each successful proposal",
          "allOf": [
            {
              "$ref": "#/definitions/Coin"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "proposal": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Proposal",
      "type": "object",
      "required": [
        "created_at",
        "fee",
        "gift",
        "id",
        "proposer",
        "receiver",
        "status"
      ],
      "properties": {
        "created_at": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "fee": {
          "$ref": "#/definitions/Coin"
        },
        "gift": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        },
        "id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "proposer": {
          "$ref": "#/definitions/Addr"
        },
        "receiver": {
          "$ref": "#/definitions/Addr"
        },
        "replied_at": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "reply": {
          "type": [
            "string",
            "null"
          ]
        },
        "speech": {
          "type": [
            "string",
            "null"
          ]
        },
        "status": {
          "$ref": "#/definitions/ProposalStatus"
        },
        "title": {
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "ProposalStatus": {
          "type": "string",
          "enum": [
            "pending",
            "yes",
            "no"
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "proposals": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ProposalsResponse",
      "type": "object",
      "required": [
        "proposals"
      ],
      "properties": {
        "proposals": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Proposal"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Proposal": {
          "type": "object",
          "required": [
            "created_at",
            "fee",
            "gift",
            "id",
            "proposer",
            "receiver",
            "status"
          ],
          "properties": {
            "created_at": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "fee": {
              "$ref": "#/definitions/Coin"
            },
            "gift": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coin"
              }
            },
            "id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "proposer": {
              "$ref": "#/definitions/Addr"
            },
            "receiver": {
              "$ref": "#/definitions/Addr"
            },
            "replied_at": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "reply": {
              "type": [
                "string",
                "null"
              ]
            },
            "speech": {
              "type": [
                "string",
                "null"
              ]
            },
            "status": {
              "$ref": "#/definitions/ProposalStatus"
            },
            "title": {
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        },
        "ProposalStatus": {
          "type": "string",
          "enum": [
            "pending",
            "yes",
            "no"
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
